{{- if .Values.applicationSet.enabled }}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "argocd.applicationset-controller" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: applicationSet
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.applicationSet.replicaCount }}
  {{- if .Values.applicationSet.updateStrategy }}
  strategy: {{- toYaml .Values.applicationSet.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: applicationSet
  template:
    metadata:
      {{- if .Values.applicationSet.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.applicationSet.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: applicationSet
        {{- if .Values.applicationSet.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.applicationSet.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "argocd.applicationset-controller.serviceAccountName" . }}
      {{- include "argocd.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.applicationSet.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.applicationSet.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
        - name: applicationSet
          {{- if .Values.applicationSet.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.applicationSet.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
            - argocd-applicationset-controller
            - --metrics-addr
            - {{ .Values.applicationSet.defaultArgs.metricsAddr | quote }}
            - --probe-addr
            - {{ .Values.applicationSet.defaultArgs.probeBindAddr | quote }}
            {{- if or (gt ( .Values.applicationSet.replicaCount | int64) 1) .Values.applicationSet.defaultArgs.enableLeaderElection }}
            - --enable-leader-election
            - 'true'
            {{- end }}
            - --namespace
            - {{ .Release.Namespace }}
            - --argocd-repo-server
            - {{ include "argocd.repo-server" . }}:{{ .Values.repoServer.service.port }}
            - --policy
            - {{ .Values.applicationSet.defaultArgs.policy }}
            - --debug
            - {{ .Values.applicationSet.defaultArgs.debug }}
            - --dry-run
            - {{ .Values.applicationSet.defaultArgs.dryRun }}
            {{- with .Values.applicationSet.extraArgs }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          image: {{ include "argocd.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.applicationSet.containerPorts.http }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.applicationSet.containerPorts.metrics }}
              protocol: TCP
            - name: webhook
              containerPort: 7000
              protocol: TCP
          env:
            {{- if .Values.applicationSet.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.applicationSet.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.applicationSet.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.applicationSet.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.applicationSet.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.applicationSet.extraEnvVarsSecret "context" $) }}
            {{- end }}
          resources: {{- toYaml .Values.applicationSet.resources | nindent 12 }}
          volumeMounts:
            # Mounting into a path that will be read by Argo CD.
            # This secret will be autogenerated by Argo CD repo server unless it already exists. Users can create its own certificate to override it.
            # Ref: https://argoproj.github.io/argo-cd/operator-manual/tls/#inbound-tls-certificates-used-by-argocd-repo-sever
            - mountPath: /app/config/server/tls
              name: argocd-repo-server-tls
          {{- if .Values.applicationSet.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.applicationSet.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /app/config/tls
              name: argocd-repo-server-tls
            - mountPath: /app/config/gpg/source
              name: argocd-repo-server-gpg-keys
            - mountPath: /app/config/gpg/keys
              name: argocd-repo-server-gpg-keyring
            {{- with .Values.applicationSet.extraVolumeMounts }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
        {{- if .Values.applicationSet.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.applicationSet.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: argocd-repo-server-tls
          secret:
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        # TBR jota
        - configMap:
            name: argocd-gpg-keys-cm
            name: gpg-keys
        - emptyDir: {}
            name: gpg-keyring
        {{- if .Values.applicationSet.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.applicationSet.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
      {{- if .Values.applicationSet.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.applicationSet.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.applicationSet.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.applicationSet.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.applicationSet.podAffinityPreset "component" "applicationSet" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.applicationSet.podAntiAffinityPreset "component" "applicationSet" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.applicationSet.nodeAffinityPreset.type "key" .Values.applicationSet.nodeAffinityPreset.key "values" .Values.applicationSet.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.applicationSet.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.applicationSet.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.applicationSet.priorityClassName }}
      priorityClassName: {{ .Values.applicationSet.priorityClassName | quote }}
      {{- end }}
{{- end }}
